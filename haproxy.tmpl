global
    daemon                  off
    pidfile                 /var/run/haproxy.pid
    user                    haproxy
    group                   haproxy
    maxconn                 100000
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA

defaults
    mode                    http
    option                  splice-auto
    option                  http-keep-alive
    option                  redispatch
    retries                 3
    timeout http-request    5s
    timeout queue           1m
    timeout connect         5s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s

listen http-in
    bind *:80
    {{if exists "/certs/bundle"}}
    bind *:443 ssl crt /etc/haproxy/certs/ no-sslv3
    {{end}}
    reqadd X-Forwarded-Proto:\ https if { ssl_fc }
    reqadd X-Forwarded-Port:\ 443 if { ssl_fc }

    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http

    {{range $service := ls "/services"}}
    {{$upstreams := printf "/services/%s/upstreams/*" $service }}
    {{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
    {{if ne $upstream_len 0}}
      {{$virtual_hosts := printf "/services/%s/virtual_hosts" $service}}
      {{if exists $virtual_hosts}}
        {{range $host := split (getv $virtual_hosts) "," }}
          acl host_{{$service}} hdr(host) -i {{$host}}
          acl host_{{$service}} hdr(host) -i {{$host}}:80
          {{if exists "/certs" }}
          acl host_{{$service}} req_ssl_sni -i {{getv $host}}
          acl host_{{$service}} req_ssl_sni -i {{getv $host}}:443
          {{end}}
        {{end}}
      {{end}}

      {{$virtual_path := printf "/services/%s/virtual_path" $service}}
      {{if exists $virtual_path}}
        acl host_{{$service}}_path url_beg {{getv $virtual_path}}
        {{if exists $virtual_hosts}}
        use_backend {{$service}} if host_{{$service}} host_{{$service}}_path
        {{else}}
        use_backend {{$service}} if host_{{$service}}_path
        {{end}}
      {{else}}
        use_backend {{$service}} if host_{{$service}}
      {{end}}
    {{end}}
    {{end}}

{{range $service := ls "/services"}}
{{$upstreams := printf "/services/%s/upstreams/*" $service }}
{{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
{{if ne $upstream_len 0}}
backend {{$service}}
    option                  forwardfor
    {{$custom_settings := printf "/services/%s/custom_settings" $service}}
    {{if exists $custom_settings}}
      {{range $setting := split (getv $custom_settings) "\n" }}
        {{$setting}}
      {{end}}
    {{end}}

    {{$balance := printf "/services/%s/balance" $service}}
    {{if exists $balance}}
    balance                 {{getv $balance}}
    {{else}}
    balance                 roundrobin
    {{end}}

    {{$virtual_path := printf "/services/%s/virtual_path" $service}}  {{if exists $virtual_path}}
    reqrep ^([^\ :]*)\ {{getv $virtual_path}}[/]?(.*)     \1\ /\2
    {{end}}

    {{range $upstream := ls (printf "/services/%s/upstreams" $service)}}
    
    {{$ratelimit := printf "" }}
    {{$ratelimit_str := printf "/services/%s/ratelimit" $service}}
    {{$ratelimit_value := gets $ratelimit_str}}
    {{if exists $ratelimit_value}}
      {{$ratelimit := printf "maxconnrate %s" $ratelimit_value}}
    {{end}}
    
    server {{$upstream}} {{printf "/services/%s/upstreams/%s" $service $upstream | getv}} {{$ratelimit}} check
    {{end}}
{{end}}
{{end}}

{{range $service := ls "/tcp-services"}}
{{$upstreams := printf "/services/%s/upstreams/*" $service }}
{{$upstream_servers := gets $upstreams }} {{$upstream_len := len $upstreams}}
{{if ne $upstream_len 0}}
listen {{$service}}
    mode tcp
    {{$balance := printf "/tcp-services/%s/balance" $service}}
    {{if exists $balance}}
    balance                 {{getv $balance}}
    {{else}}
    balance                 leastconn
    {{end}}

    {{$custom_settings := printf "/tcp-services/%s/custom_settings" $service}}
    {{if exists $custom_settings}}
      {{range $setting := split (getv $custom_settings) "\n" }}
        {{$setting}}
      {{end}}
    {{end}}

    bind *:{{printf "/tcp-services/%s/external_port" $service | getv}}
    {{range $upstream := ls (printf "/tcp-services/%s/upstreams" $service)}}
    {{$ratelimit := printf "" }}
    {{$ratelimit_str := printf "/services/%s/ratelimit" $service}}
    {{$ratelimit_value := gets $ratelimit_str}}
    {{if exists $ratelimit_value}}
      {{$ratelimit := printf "maxconnrate %s" $ratelimit_value}}
    {{end}}
    server {{$upstream}} {{printf "/tcp-services/%s/upstreams/%s" $service $upstream | getv}} {{$ratelimit}} check
    {{end}}
{{end}}
{{end}}

listen stats
    mode http
    bind 0.0.0.0:1000
    stats enable
    stats uri /
    stats refresh 10s
    stats show-node
    stats show-legends

    # if authentication is wanted
    acl auth_ok http_auth(stats-auth)
    http-request auth unless auth_ok

userlist stats-auth
    user stats insecure-password {{getenv "STATS_PASSWORD"}}
